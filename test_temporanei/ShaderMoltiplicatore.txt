// SHADER DA INSERIRE NELL'INDEX.HTML (FILE CON LA SCENA THREEJS)
<!-- SHADER PER IL BONUS STELLA -->
		
<script type="text/x-glsl" id="vertexStella">
	varying vec3 vColor;
	uniform vec3 materialColor;
			
	void main() {
    	vec3 newPosition = position;	
		gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );
		vColor = materialColor;
				
	}
</script>
		
<script type="text/x-glsl" id="fragmentStella">
	varying vec3 vColor;

	void main() {
		gl_FragColor = vec4(vColor, 1.0);
	}
</script>	
		
// Animazioni.js -> aggiornaMeshPowerUp() dentro il for

if(powerUpInScenaTipo[i] == "stella"){  // TEMP se e' una stella uso lo shader
	aggiornaColore(powerUpInScena[i]);
}

// Animazioni.js

// uso uno shader per modificare ad ogni frame il colore del powerUp stella sulla scena
function aggiornaColore(sphere){
	colore3 = randomConRange(1,40)/100; // giallo
	var uniforms = { materialColor:	{ type: "v3", value: new THREE.Vector3() } };
	sphere.material.uniforms.materialColor.value = new THREE.Vector3(1.0,1.0,colore3);
}

// PowerUp.js

// Aggiunge la stella (moltiplicatore) alla scena e agli array
function aggiungiStella(z){
  var x = scegliLato();
  var geometriaStella = new THREE.SphereBufferGeometry(1,16,16);
  var vs = document.getElementById("vertexStella").textContent;
  var fs = document.getElementById("fragmentStella").textContent;
  var uniforms = { materialColor:	{ type: "v3", value: new THREE.Vector3() } };
  var materialeStella = new THREE.ShaderMaterial({ uniforms: uniforms, vertexShader: vs, fragmentShader: fs });
  var stellaMesh = new THREE.Mesh(geometriaStella, materialeStella);
  
  //aggiornaPosiz(stellaMesh);
  aggiornaColore(stellaMesh);

  stellaMesh.position.set(x/7.2, 1, -z);
  scene.add(stellaMesh);
  powerUpInScena.push(stellaMesh);
  powerUpInScenaTipo.push("stella");
}